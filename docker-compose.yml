version: "3.8"

services:
  postgresdb:
    image: postgres:latest
    container_name: postgresdb
    environment:
      POSTGRES_DB: cybergaz
      POSTGRES_USER: gaz
      POSTGRES_PASSWORD: cybergaz
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    restart: always

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    command: npm run dev
    ports:
      - "3000:3000"
      - "8080:8080"
    environment:
      POSTGRES_HOST: postgresdb
      POSTGRES_USER: gaz
      POSTGRES_DB: cybergaz
      POSTGRES_PASSWORD: cybergaz
      POSTGRES_PORT: 5432
    depends_on:
      - postgresdb
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    # command: npm run dev
    ports:
      - "5173:5173"
    restart: always
